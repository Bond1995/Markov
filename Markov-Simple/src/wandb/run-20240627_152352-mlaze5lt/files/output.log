Training model=base
{'config_format': 'markov', 'batch_size': 16, 'acc_steps': 1, 'seed': 0, 'device': device(type='cpu'), 'iterations': 500, 'lr': 0.002, 'warmup_percent': 0.02, 'weight_decay': 0.001, 'beta1': 0.9, 'beta2': 0.95, 'scheduler': 'cos', 'opt': 'adamw', 'eval_freq': 1, 'results_base_folder': './exps', 'grad_clip': 0.0, 'dataset': 'markov', 'vocab_size': 2, 'data_in_ram': False, 'model': 'base', 'use_pretrained': 'none', 'dropout': 0, 'n_head': 1, 'n_layer': 1, 'n_embd': 4, 'sequence_length': 1024, 'dtype': torch.float16, 'bias': False, 'no_compile': False, 'wandb': True, 'wandb_project': 'test', 'wandb_run_prefix': 'none', 'eval_seq_prefix': '0', 'distributed_backend': None, 'p': 0.2, 'q': 0.3, 'memory': -1, 'initial': 'steady', 'no_tying': False, 'init': 'base', 'v_std': 0, 'world_size': 1}
4293
Compiling model ...
tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1,
        1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
        1, 1, 0, 0])
wte:
Parameter containing:
tensor([[-0.0093],
        [-0.0215],
        [-0.0043],
        [-0.0149]], requires_grad=True)
wpe:
Parameter containing:
tensor([[-0.0043,  0.0160,  0.0173, -0.0139],
        [ 0.0186, -0.0374, -0.0097, -0.0131],
        [-0.0175, -0.0106, -0.0079,  0.0006],
        ...,
        [ 0.0180, -0.0238, -0.0064, -0.0072],
        [ 0.0175,  0.0072,  0.0117,  0.0211],
        [ 0.0196,  0.0290, -0.0010, -0.0277]], requires_grad=True)
W_Q W_K W_V:
[[-0.04968634 -0.00437134  0.01301154 -0.0105618 ]
 [ 0.01401295 -0.01159508 -0.01363213  0.00590185]
 [-0.02703275  0.00080101  0.00362972 -0.03769655]
 [-0.02001003  0.01619387 -0.0168879   0.02783864]
 [ 0.00360882  0.00361996 -0.02471599  0.00727417]
 [ 0.02460482 -0.04083173 -0.00648241  0.01008134]
 [-0.02786429  0.02793291 -0.00030534  0.00351215]
 [ 0.00283336 -0.01678356 -0.02996343  0.03766223]
 [-0.02146081  0.01620328  0.00859876  0.01244455]
 [-0.0363675  -0.00172884  0.00050065 -0.00490501]
 [-0.00874226  0.00734371  0.01302863 -0.00071867]
 [-0.00739801  0.01302749 -0.01047673 -0.0331317 ]]
Approximation error:
tensor(0.0002, grad_fn=<CompiledFunctionBackward>)
c_fc:
Parameter containing:
tensor([[ 0.0041, -0.0198, -0.0134,  0.0007],
        [ 0.0172,  0.0118,  0.0086, -0.0095],
        [ 0.0350, -0.0080, -0.0115, -0.0135],
        [ 0.0133,  0.0168, -0.0007,  0.0126],
        [-0.0028, -0.0051,  0.0063, -0.0383],
        [-0.0099, -0.0116,  0.0074, -0.0024],
        [ 0.0033,  0.0077, -0.0195,  0.0193],
        [ 0.0228,  0.0184, -0.0382, -0.0113],
        [-0.0100, -0.0239, -0.0226,  0.0159],
        [ 0.0382,  0.0033,  0.0033, -0.0128],
        [ 0.0255, -0.0014, -0.0128, -0.0090],
        [ 0.0234, -0.0339,  0.0097, -0.0159],
        [-0.0021,  0.0080, -0.0120,  0.0055],
        [ 0.0032,  0.0041,  0.0005,  0.0175],
        [ 0.0020,  0.0183, -0.0182, -0.0011],
        [-0.0040,  0.0244,  0.0011,  0.0047]], requires_grad=True)
c_proj:
Parameter containing:
tensor([[ 0.0222,  0.0273, -0.0161, -0.0074,  0.0018, -0.0146,  0.0003,  0.0034,
         -0.0104,  0.0015,  0.0180,  0.0007,  0.0089, -0.0096,  0.0085, -0.0068],
        [ 0.0209,  0.0238,  0.0251, -0.0071,  0.0057, -0.0001,  0.0066,  0.0242,
         -0.0132,  0.0126, -0.0295,  0.0050, -0.0092, -0.0084,  0.0099, -0.0022],
        [ 0.0035,  0.0148, -0.0070,  0.0082, -0.0137, -0.0170,  0.0059,  0.0135,
         -0.0100, -0.0178, -0.0041, -0.0301, -0.0083,  0.0218,  0.0048, -0.0134],
        [ 0.0127,  0.0002, -0.0002, -0.0166,  0.0114, -0.0058, -0.0062, -0.0175,
         -0.0024,  0.0038,  0.0066, -0.0173,  0.0033, -0.0031,  0.0110, -0.0022]],
       requires_grad=True)
Traceback (most recent call last):
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/main.py", line 153, in <module>
    main(args)
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/main.py", line 135, in main
    stats = train(model, opt, P, scheduler, args.iterations, args.acc_steps, args.batch_size, args.sequence_length, generator,
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/optim/base.py", line 32, in train_base
    outputs = model(x, targets=y)
              ^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/eval_frame.py", line 451, in _fn
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 281, in forward
    def forward(self, idx, targets=None, get_logits=False):
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 285, in torch_dynamo_resume_in_forward_at_285
    print(idx[0,:100])
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 293, in torch_dynamo_resume_in_forward_at_293
    print("wte:")
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 294, in torch_dynamo_resume_in_forward_at_294
    print(self.transformer.wte.weight)
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 295, in torch_dynamo_resume_in_forward_at_295
    print("wpe:")
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 315, in torch_dynamo_resume_in_forward_at_296
    x = block(x)
        ^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 169, in forward
    def forward(self, x):
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 171, in torch_dynamo_resume_in_forward_at_171
    y = self.attn(x)
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 173, in torch_dynamo_resume_in_forward_at_173
    print("Approximation error:")
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 174, in torch_dynamo_resume_in_forward_at_174
    print(torch.mean(torch.norm(y[0], dim=1) / torch.norm(z[0], dim=1)))
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 131, in forward
    def forward(self, x):
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 137, in torch_dynamo_resume_in_forward_at_137
    print("c_fc:")
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 138, in torch_dynamo_resume_in_forward_at_138
    print(self.c_fc.weight)
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 139, in torch_dynamo_resume_in_forward_at_139
    print("c_proj:")
  File "/Users/bondasch/Downloads/IT/Markov/Markov-Simple/src/models/base.py", line 140, in torch_dynamo_resume_in_forward_at_140
    print(self.c_proj.weight)
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/pyplot.py", line 3325, in imshow
    @_copy_docstring_and_deprecators(Axes.imshow)
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/pyplot.py", line 2528, in gca
    return gcf().gca()
           ^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/figure.py", line 1658, in gca
    return ax if ax is not None else self.add_subplot()
                                     ^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/figure.py", line 782, in add_subplot
    ax = projection_class(self, *args, **pkw)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 569, in __init__
    def __init__(self, fig,
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 624, in torch_dynamo_resume_in___init___at_624
    super().__init__()
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 639, in torch_dynamo_resume_in___init___at_639
    subplotspec = SubplotSpec._from_subplot_args(fig, args)
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 640, in torch_dynamo_resume_in___init___at_640
    if self._position.width < 0 or self._position.height < 0:
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 640, in torch_dynamo_resume_in___init___at_640
    if self._position.width < 0 or self._position.height < 0:
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 651, in torch_dynamo_resume_in___init___at_651
    self.set_figure(fig)
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 788, in set_subplotspec
    self._set_position(subplotspec.get_position(self.figure))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/gridspec.py", line 658, in get_position
    def get_position(self, figure):
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/gridspec.py", line 664, in torch_dynamo_resume_in_get_position_at_664
    rows, cols = np.unravel_index([self.num1, self.num2], (nrows, ncols))
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/_api/deprecation.py", line 384, in wrapper
    return func(*inner_args, **inner_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/gridspec.py", line 144, in get_grid_positions
    @_api.delete_parameter("3.7", "raw")
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py", line 921, in catch_errors
    return callback(frame, cache_entry, hooks, frame_state, skip=1)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py", line 786, in _convert_frame
    result = inner_convert(
             ^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py", line 400, in _convert_frame_assert
    return _compile(
           ^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/contextlib.py", line 81, in inner
    return func(*args, **kwds)
           ^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py", line 676, in _compile
    guarded_code = compile_inner(code, one_graph, hooks, transform)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 262, in time_wrapper
    r = func(*args, **kwargs)
        ^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py", line 535, in compile_inner
    out_code = transform_code_object(code, transform)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/bytecode_transformation.py", line 1036, in transform_code_object
    transformations(instructions, code_options)
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py", line 165, in _fn
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py", line 500, in transform
    tracer.run()
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py", line 2149, in run
    super().run()
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py", line 810, in run
    and self.step()
        ^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py", line 773, in step
    getattr(self, inst.opname)(inst)
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py", line 489, in wrapper
    return inner_fn(self, inst)
           ^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py", line 1802, in CALL
    self.call_function(fn, args, kwargs)
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py", line 674, in call_function
    self.push(fn.call_function(self, args, kwargs))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/variables/misc.py", line 745, in call_function
    return NumpyNdarrayVariable.create(tx, proxy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/variables/tensor.py", line 963, in create
    return wrap_fx_proxy_cls(
           ^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/variables/builder.py", line 1415, in wrap_fx_proxy_cls
    example_value = get_fake_value(proxy.node, tx, allow_non_graph_fake=True)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1632, in get_fake_value
    args, kwargs = get_fake_values_from_nodes(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1605, in get_fake_values_from_nodes
    return torch.fx.node.map_arg(nodes, visit)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/fx/node.py", line 708, in map_arg
    return map_aggregate(a, lambda x: fn(x) if isinstance(x, Node) else x)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/fx/node.py", line 716, in map_aggregate
    t = tuple(map_aggregate(elem, fn) for elem in a)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/fx/node.py", line 716, in <genexpr>
    t = tuple(map_aggregate(elem, fn) for elem in a)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/fx/node.py", line 716, in map_aggregate
    t = tuple(map_aggregate(elem, fn) for elem in a)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/fx/node.py", line 716, in <genexpr>
    t = tuple(map_aggregate(elem, fn) for elem in a)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/fx/node.py", line 726, in map_aggregate
    return fn(a)
           ^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/fx/node.py", line 708, in <lambda>
    return map_aggregate(a, lambda x: fn(x) if isinstance(x, Node) else x)
                                      ^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1598, in visit
    return get_fake_value(n, tx, allow_non_graph_fake)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1714, in get_fake_value
    raise TorchRuntimeError(str(e)).with_traceback(e.__traceback__) from None
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1656, in get_fake_value
    ret_val = wrap_fake_exception(
              ^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1190, in wrap_fake_exception
    return fn()
           ^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1657, in <lambda>
    lambda: run_node(tx.output, node, args, kwargs, nnmodule)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1782, in run_node
    raise RuntimeError(make_error_message(e)).with_traceback(
  File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/torch/_dynamo/utils.py", line 1764, in run_node
    return node.target(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch._dynamo.exc.TorchRuntimeError: Failed running call_function <built-in function getattr>(*(FakeTensor(..., size=(1, 2), dtype=torch.float64), 'flat'), **{}):
'FakeTensor' object has no attribute 'flat'
from user code:
   File "/Users/bondasch/anaconda3/lib/python3.11/site-packages/matplotlib/gridspec.py", line 192, in torch_dynamo_resume_in_get_grid_positions_at_176
    cell_hs = np.cumsum(np.column_stack([sep_heights, cell_heights]).flat)
Set TORCH_LOGS="+dynamo" and TORCHDYNAMO_VERBOSE=1 for more information
You can suppress this exception and fall back to eager by setting:
    import torch._dynamo
    torch._dynamo.config.suppress_errors = True